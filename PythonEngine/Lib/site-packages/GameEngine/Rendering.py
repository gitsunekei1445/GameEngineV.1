import sys
sys.path.append('..')
from OpenGL.GL import glEnableClientState,glVertex,glClearColor,glClear,GL_COLOR_BUFFER_BIT,\
    glLoadIdentity,glBegin,glVertex2f,glEnd,glBegin,GL_QUADS,\
    glColor3f,glViewport,glMatrixMode,glOrtho,GL_PROJECTION,GL_MODELVIEW,\
    glVertexPointer,GL_VERTEX_ARRAY,GL_COLOR_ARRAY,GL_FLOAT,glColorPointer,GL_VERTEX_SHADER,\
    GL_FRAGMENT_SHADER,glGenVertexArrays,glGenBuffers,GL_ARRAY_BUFFER,GL_STATIC_DRAW,glBindVertexArray,\
    glBufferData,GL_STATIC_DRAW,GL_FALSE,glEnableVertexAttribArray,glVertexAttribPointer,glUseProgram,glEnable,\
    glBlendFunc,GL_DEPTH_TEST,GL_BLEND,GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA,glGetUniformLocation,glUniformMatrix4fv,\
    GL_DEPTH_BUFFER_BIT,glGenTextures,glBindBuffer,ctypes


from OpenGL.GL.shaders import compileProgram,compileShader
import numpy as np
import GameEngine.GLSL
from GameEngine.ObjLoader import ObjLoader
from GameEngine.TextureLoader import load_texture
from GameEngine.GLSL import GLSL
import pyrr

class Render:
    shader=None
    textures = None

    model_indices = None
    VAO = None
    model_loc=None
    model_pos =None


    def __init__(self):
        pass
    @staticmethod
    def set_background(red,green,blue,alpha):
        glClearColor(red,green,blue,alpha)

    @staticmethod
    def clear_screen(self):
        pass

    #  Rect triangle not completed
    @staticmethod
    def draw_rect(position_X,position_Y):
        verticeA = [
            -0.5,-0.5,0,
            -0.5, 0.5, 0,
            0.5, 0.5, 0,
            0.5,-0.5,0

        ]
        colorA = [
            1,1,1,
            1,1,1,
            1,1,1,
            1,1,1
        ]

        vertice = np.array(verticeA, dtype=np.float32)
        color = np.array(colorA,dtype=np.float32)

        glEnableClientState(GL_VERTEX_ARRAY)
        glVertexPointer(3, GL_FLOAT, 0, vertice)

        glEnableClientState(GL_COLOR_ARRAY)
        glColorPointer(3, GL_FLOAT, 0, color)

    @staticmethod
    def render_update():
        glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT )
        glLoadIdentity()

    @staticmethod
    def render_model(pathModel,pathTextures):

        Render.textures = glGenTextures(2)

        Render.model_indices,model_buffer = ObjLoader.load_model("Bin/Grassv2.obj")

        Render.shader = compileProgram(compileShader(GLSL.vertex_src_loaderModel, GL_VERTEX_SHADER), compileShader(GLSL.fragment_src_loaderModel, GL_FRAGMENT_SHADER))



        # VAO and VBO
        Render.VAO = glGenVertexArrays(2)
        VBO = glGenBuffers(2)

        # Chibi VAO
        glBindVertexArray(Render.VAO[0])
        # Chibi Vertex Buffer Object
        glBindBuffer(GL_ARRAY_BUFFER, VBO[0])
        glBufferData(GL_ARRAY_BUFFER, model_buffer.nbytes, model_buffer, GL_STATIC_DRAW)

        # glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO)
        # glBufferData(GL_ELEMENT_ARRAY_BUFFER, chibi_indices.nbytes, chibi_indices, GL_STATIC_DRAW)

        # chibi vertices
        glEnableVertexAttribArray(0)
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, model_buffer.itemsize * 8, ctypes.c_void_p(0))
        # chibi textures
        glEnableVertexAttribArray(1)
        glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, model_buffer.itemsize * 8, ctypes.c_void_p(12))
        # chibi normals
        glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, model_buffer.itemsize * 8, ctypes.c_void_p(20))
        glEnableVertexAttribArray(2)


        load_texture("Bin/Grass.png", Render.textures[0]);

        glUseProgram(Render.shader)
        glEnable(GL_DEPTH_TEST)
        glEnable(GL_BLEND)
        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)

        projection = pyrr.matrix44.create_perspective_projection_matrix(45, 1280 / 720, 0.1, 100)
        Render.model_pos = pyrr.matrix44.create_from_translation(pyrr.Vector3([0, 0, 0]))

        # eye, target, up
        view = pyrr.matrix44.create_look_at(pyrr.Vector3([0, 0, 8]), pyrr.Vector3([0, 0, 0]), pyrr.Vector3([0, 1, 0]))

        Render.model_loc = glGetUniformLocation(Render.shader, "model")
        proj_loc = glGetUniformLocation(Render.shader, "projection")
        view_loc = glGetUniformLocation(Render.shader, "view")

        glUniformMatrix4fv(proj_loc, 1, GL_FALSE, projection)
        glUniformMatrix4fv(view_loc, 1, GL_FALSE, view)


