 # Import line 2-4 on process
import sys
sys.path.append("..")
from glfw import init,create_window,poll_events,swap_buffers,window_should_close,terminate,\
    set_window_pos,make_context_current,get_primary_monitor,set_window_monitor,set_window_title,\
    set_window_size,set_window_icon,get_time
from PIL import Image


#Import line 6 on develop
# from ..glfw import init,create_window,poll_events,swap_buffers,window_should_close,terminate,set_window_pos,make_context_current,set_window_monitor,get_primary_monitor

class Gui():

    timerAfter= 0
    timerOn= False
    timerStart = 0
    fps=0

    def __init__(self):
        # variable defualt in Class GUI
        self.width = 400
        self.height = 300
        self.position_X = 400
        self.position_Y = 200
        self.fullscreen = None
        self.title = "GUI"
        self.share = None
        self.gui = None
        self.gui_Close = None
        self.icon_Referance = 'icon.png'
        self.icon = None
        # Setup and catch GLFW INIT Lisbrary
        if not init():
            raise Exception('GLFW can not be created !')

    def gui_create(self, width, height, title):
        if width < 1 and height < 1:
            raise Exception('Enter your Width or Height > 0 ')
        else:
            self.width = width
            self.height = height
            self.title = title
            self.gui = create_window(self.width, self.height, self.title, self.fullscreen, self.share)

            if not self.gui:
                raise Exception(" GLFW Cen not Create gui !")
            # self.icon = Image.open('icon.png')
            # set_window_icon(self.gui, 1, self.icon)
            set_window_pos(self.gui,self.position_X,self.position_Y)
            make_context_current(self.gui)

            return self.gui

    def gui_update(self):
        poll_events()
        if not self.gui:
            raise Exception('GUI is not create !')
        else:
            swap_buffers(self.gui)
            self.gui_Close = window_should_close(self.gui)

    def gui_terminate(self):
        terminate()

    def gui_setFullscreenMode(self):
        if not self.gui:
            raise Exception (" GLFW Cen not Create gui !")
        if self.fullscreen == None :
            self.fullscreen = get_primary_monitor()
            set_window_monitor(self.gui,self.fullscreen,self.position_X,self.position_Y,self.width,self.height,0)

    def gui_setWindowMode(self):
        if not self.gui:
            raise Exception (" GLFW Cen not Create gui !")
        if self.fullscreen != None :
            self.fullscreen = None
            set_window_monitor(self.gui,self.fullscreen,self.position_X,self.position_Y,self.width,self.height,0)

    def gui_setTitle(self,title):
        if not self.gui:
            raise Exception (" GLFW Cen not Create gui !")
        self.title = title
        set_window_title(self.gui,self.title)

    def gui_setSizeWindow(self,width,height):
        if not self.gui:
            raise Exception (" GLFW Cen not Create gui !")
        self.width = width
        self.height= height
        set_window_size(self.gui,self.width,self.height)

    def gui_setIconWindow(self,path):
        #  bug path icon not found
        self.icon = Image.open('icon.png')
        if not self.gui:
            raise Exception (" GLFW Cen not Create gui !")
        set_window_icon(self.gui,1,self.icon)

    @staticmethod
    def gui_showFPS():
        Gui.fps += 1
        if not Gui.timerOn:
            Gui.timerOn = True
            Gui.timeStart = get_time()
        timeNow = get_time()
        if timeNow - Gui.timeStart >= 1.0:
            print('FPS : {}'.format(Gui.fps))
            Gui.fps = 0
            Gui.timeStart += 1.0




if __name__ == '__main__':
    gui  = Gui()
    winApp=gui.gui_create(1270,800,'Test')
    # gui.gui_setFullscreenMode()   set moniter fullsrceen mode
    # gui.gui_setWindowMode()       set moniter window mode
    # gui.gui_setTitle('Test')      set title window as test
    while not gui.gui_Close:
        gui.gui_update()
    gui.gui_terminate()

